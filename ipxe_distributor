#!/usr/bin/env python
#
# Copyright (C) by Andreas Maus <maus@ypbind.de>
# This program comes with ABSOLUTELY NO WARRANTY.
#
# This program is distributed under the Terms of the GNU General
# Public License Version 3. (http://www.gnu.org/copyleft/gpl.html)
#

import bottle
import yaml
import sys

configuration_file = "/etc/ipxe-distributor/config.yaml"
listen_host = "localhost"
listen_port = 8080

ipxe_prepend = ""
ipxe_append = ""
images = {}
nodes = {}
nodes_by_mac = {}
nodes_by_serial = {}
nodes_by_group = {}

default_image = "sanboot --no-describe --drive 0x80"
ipxe_distributor = application = bottle.Bottle()


def read_yaml_configuration(yaml_file):
    """
    Read YAML configuration into global data
    :param yaml_file: str
    :return: None
    """
    global images, ipxe_append, ipxe_prepend, nodes, nodes_by_mac, nodes_by_serial, default_image
    global listen_host, listen_port, nodes_by_group

    try:
        with open(yaml_file, "r") as fd:
            raw = fd.read()
    except ValueError:
        images = {}
        nodes = {}
        nodes_by_mac = {}
        nodes_by_serial = {}
        nodes_by_group = {}
        return
    except IOError:
        images = {}
        nodes = {}
        nodes_by_mac = {}
        nodes_by_serial = {}
        nodes_by_group = {}
        return

    try:
        y = yaml.load(raw)
    except yaml.error.YAMLError:
        images = {}
        nodes = {}
        nodes_by_mac = {}
        nodes_by_serial = {}
        nodes_by_group = {}
        return

    if "global" in y:
        if "host" in y["global"]:
            listen_host = y["global"]["host"]

        if "port" in y["global"]:
            try:
                listen_port = int(y["global"]["port"])
            except ValueError:
                sys.stderr.write("Error: Can't convert %s into an integer, using %d instead\n" %
                                 y["global"]["port"]. listen_port, )

    if "default" in y:
        if "default_image" in y["default"]:
            default_image = "\n".join(y["default"]["default_image"])
        if "ipxe_append" in y["default"]:
            ipxe_append = "\n".join(y["default"]["ipxe_append"])
        if "ipxe_prepend" in y["default"]:
            ipxe_prepend = "\n".join(y["default"]["ipxe_prepend"])

    if "images" in y:
        for img in y["images"].keys():
            if "action" in y["images"][img]:
                images[img] = y["images"][img]

    if "nodes" in y:
        for n in y["nodes"].keys():
            if "image" not in y["nodes"][n]:
                continue

            nodes[n] = y["nodes"][n]["image"]

            if "mac" in y["nodes"][n]:
                nodes_by_mac[y["nodes"][n]["mac"]] = n
            if "serial" in y["nodes"][n]:
                nodes_by_serial[y["nodes"][n]["serial"]] = n
            if "group" in y["nodes"][n]:
                nodes_by_group[y["nodes"][n]["group"]] = n


@ipxe_distributor.get("/mac/<mac:re:[0-9a-fA-F]{2}[:\-]?[0-9a-fA-F]{2}[:\-]?[0-9a-fA-F]{2}[:\-]?[0-9a-fA-F]{2}[:\-]?"
                      "[0-9a-fA-F]{2}[:\-]?[0-9a-fA-F]{2}>")
@ipxe_distributor.get("/mac/<mac:re:[0-9a-fA-F]{2}[:\-]?[0-9a-fA-F]{2}[:\-]?[0-9a-fA-F]{2}[:\-]?[0-9a-fA-F]{2}[:\-]?"
                      "[0-9a-fA-F]{2}[:\-]?[0-9a-fA-F]{2}>/")
def ipxe_node_by_mac(mac):
    """
    Load iPXE by MAC address
    :param mac: str
    :return: str
    """
    global configuration_file

    read_yaml_configuration(configuration_file)

    ipxe = "#!ipxe\n"

    if mac in nodes_by_mac:
        ipxe += ipxe_prepend
        node = nodes_by_mac[mac]
        image_name = nodes[node]
        if image_name in images:
            image = "\n".join(images[image_name]["action"])
        else:
            image = default_image

        ipxe += image
        ipxe += ipxe_append
    else:
        ipxe += default_image

    # Make sure to prepend a new line
    ipxe += "\n"

    return ipxe


# noinspection PyPep8
@ipxe_distributor.get("/serial/<serial:re:[a-zA-Z0-9_\[\]\-. ]+>")
# noinspection PyPep8
@ipxe_distributor.get("/serial/<serial:re:[a-zA-Z0-9_\[\]\-. ]+>/")
def ipxe_node_by_serial(serial):
    """
    Load iPXE by serial number
    :param serial: str
    :return: str
    """
    global configuration_file

    read_yaml_configuration(configuration_file)

    ipxe = "#!ipxe\n"

    if serial in nodes_by_serial:
        ipxe += ipxe_prepend
        node = nodes_by_serial[serial]
        image_name = nodes[node]
        if image_name in images:
            image = "\n".join(images[image_name]["action"])
        else:
            image = default_image

        ipxe += image
        ipxe += ipxe_append
    else:
        ipxe += default_image

    # Make sure to prepend a new line
    ipxe += "\n"

    return ipxe


# noinspection PyPep8
@ipxe_distributor.get("/group/<group:re:[a-zA-Z0-9_\[\]\-. ]+>")
# noinspection PyPep8
@ipxe_distributor.get("/group/<group:re:[a-zA-Z0-9_\[\]\-. ]+>/")
def ipxe_node_by_group(group):
    """
    Load iPXE by group name
    :param group: str
    :return: str
    """
    global configuration_file

    read_yaml_configuration(configuration_file)

    ipxe = "#!ipxe\n"

    if group in nodes_by_group:
        ipxe += ipxe_prepend
        node = nodes_by_group[group]
        image_name = nodes[node]
        if image_name in images:
            image = "\n".join(images[image_name]["action"])
        else:
            image = default_image

        ipxe += image
        ipxe += ipxe_append
    else:
        ipxe += default_image

    # Make sure to prepend a new line
    ipxe += "\n"

    return ipxe


@ipxe_distributor.get("/default")
@ipxe_distributor.get("/default/")
def ipxe_default():
    """
    Server default configuration
    :return: str
    """
    global configuration_file
    read_yaml_configuration(configuration_file)

    return "#!ipxe\n" + default_image


# reject all other HTTP methods besides GET
@ipxe_distributor.post()
@ipxe_distributor.put()
@ipxe_distributor.delete()
def reject_all_other_http_methods():
    """
    Reject all other HTTP methods except GET
    :return: str
    """
    raise bottle.HTTPError(status=400, body="HTTP 400 - Bad Request")


@bottle.error(404)
def http_status_404(error):
    """
    HTTP 404 error handler
    :param error:
    :return: str
    """
    return "HTTP 404 - Not found"


@bottle.error(500)
def http_status_500(error):
    """
    HTTP 404 error handler
    :param error:
    :return: str
    """
    return "HTTP 500 - Internal Server Error"



if __name__ == "__main__":
    host = "localhost"
    port = 8080

    if len(sys.argv) == 2:
        configuration_file = sys.argv[1]

    read_yaml_configuration(configuration_file)

    bottle.run(app=ipxe_distributor, host=listen_host, port=listen_port, debug=True)
    sys.exit(0)
